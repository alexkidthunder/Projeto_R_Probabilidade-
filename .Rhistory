alcohol_database[by(3),8]
alcohol_database[by=3,8]
alcohol_database[1,8]
############### Relação com o álcool #################################
# 1. Escola em que estudou e toma bebida alcoolica
table (alcohol_database$ESCOLA_Q_ESTUDOU,alcohol_database$VC_BEBI)
# 3. Média de idade em que começou a beber por vontade própria ou por “pressão” de algum conhecido
tapply(alcohol_database$IDADE, alcohol_database$PQ_COMECOU, mean)
tapply(alcohol_database$IDADE, alcohol_database$PRESSAO, mean,na.rm=T)
tapply(alcohol_database$IDADE, alcohol_database$PRESSAO, mean)
############### Relação com o álcool #################################
# 1. Escola em que estudou e toma bebida alcoolica
table (alcohol_database$ESCOLA_Q_ESTUDOU,alcohol_database$VC_BEBI)
# 3. Porcentagem de pessoas que moram com a familia e não bebem
percentage_wrapper(alcohol_database$MORA_COM)
# 2. Porcentagem de pessoas por curso
percentage_wrapper(alcohol_database$CURSO)
percentage_wrapper(GENDER)
################### Porcentagens #######################
# 1. Porcentagem de pessoas por sexo
GENDER <- factor(alcohol_database$SEXO, levels=c(1,2), labels=c("homem", "mulher"))
percentage_wrapper(GENDER)
#######################################################
# CRIANDO FUNÇÕES, PORQUE CANSEI DE PESQUISAR NO GOOGLE
#######################################################
giveme_percentage <- function(column_values, by=0) {
counter_specific <- 0
total <- 0
for(element in column_values) {
if(!is.na(element)) {
if (!is.null(element) && element == by) {
counter_specific <- counter_specific + 1
}
}
total <- total + 1
}
return(scales::percent(counter_specific / total))
}
percentage_wrapper <- function(column) {
for(key in unique(column)) {
if(!is.na(key)) {
percentage_calculated <- giveme_percentage(column, key)
cat(sprintf("\"%s\" \"%s\"\n", key, percentage_calculated))
}
}
}
################### Porcentagens #######################
# 1. Porcentagem de pessoas por sexo
GENDER <- factor(alcohol_database$SEXO, levels=c(1,2), labels=c("homem", "mulher"))
percentage_wrapper(GENDER)
# 3. Porcentagem de pessoas que moram com a familia e não bebem
percentage_wrapper(alcohol_database$MORA_COM)
# 2. Porcentagem de pessoas por curso
alcohol_database[1,8]
# 2. Porcentagem de pessoas por curso
alcohol_database[alcohol_database$CURSO,8]
# 2. Porcentagem de pessoas por curso
alcohol_database[1,1]
# 1. Moda da Renda Familiar
alcohol_database[which.max(alcohol_database$RENDA_FAMILI),8]
# 3. Porcentagem de pessoas que moram com a familia e não bebem
alcohol_database[alcohol_database$MORA_COM,8]
# 3. Porcentagem de pessoas que moram com a familia e não bebem
alcohol_database[alcohol_database$MORA_COM,2]
# 3. Porcentagem de pessoas que moram com a familia e não bebem
alcohol_database[alcohol_database$MORA_COM,12]
# 3. Porcentagem de pessoas que moram com a familia e não bebem
alcohol_database[alcohol_database$MORA_COM == 3,12]
# 3. Porcentagem de pessoas que moram com a familia e não bebem
alcohol_database[alcohol_database$MORA_COM == 3,13]
# 3. Porcentagem de pessoas que moram com a familia e não bebem
#alcohol_database[alcohol_database$MORA_COM == 3,13] #pegar todos que tem3 na outra tabela
percentage_wrapper(alcohol_database[alcohol_database$MORA_COM == 3,13])
# 3. Porcentagem de pessoas que moram com a familia e não bebem
#alcohol_database[alcohol_database$MORA_COM == 3,13] #pegar todos que tem3 na outra tab
percentage_wrapper(alcohol_database$MORA_COM)
# 3. Porcentagem de pessoas que moram com a familia e não bebem
#alcohol_database[alcohol_database$MORA_COM == 3,13] #pegar todos que tem3 na outra tab
percentage_wrapper(alcohol_database$MORA_COM)
############### Relação com o álcool #################################
# 1. Escola em que estudou e toma bebida alcoolica
table (alcohol_database$ESCOLA_Q_ESTUDOU,alcohol_database$VC_BEBI)
# 2. Escola em que estudou e na família as pessoas tomam bebidas alcoólicas
table (alcohol_database$ESCOLA_Q_ESTUDOU,alcohol_database$FAMILIA_ BEBI)
# 2. Escola em que estudou e na família as pessoas tomam bebidas alcoólicas
table (alcohol_database$ESCOLA_Q_ESTUDOU,alcohol_database$FAMILIA_BEBI)
# 2. Escola em que estudou e na família as pessoas tomam bebidas alcoólicas
table (alcohol_database$ESCOLA_Q_ESTUDOU,alcohol_database$FAMILIA_BEBI)
############### Relação com o álcool #################################
# 1. Escola em que estudou e toma bebida alcoolica
table (alcohol_database$ESCOLA_Q_ESTUDOU,alcohol_database$VC_BEBI)# Mostra tudo sem separar
# 2. Escola em que estudou e na família as pessoas tomam bebidas alcoólicas
table (alcohol_database$ESCOLA_Q_ESTUDOU,alcohol_database$FAMILIA_BEBI)
#################################
# Selecionando o banco de dados #
#################################
alcohol_database <- read_excel(
"Banco alcool_Trabalho final.xlsx",  sheet = "grupo 1"
)
#######################################################
# CRIANDO FUNÇÕES, PORQUE CANSEI DE PESQUISAR NO GOOGLE
#######################################################
giveme_percentage <- function(column_values, by=0) {
counter_specific <- 0
total <- 0
for(element in column_values) {
if(!is.na(element)) {
if (!is.null(element) && element == by) {
counter_specific <- counter_specific + 1
}
}
total <- total + 1
}
return(scales::percent(counter_specific / total))
}
percentage_wrapper <- function(column) {
for(key in unique(column)) {
if(!is.na(key)) {
percentage_calculated <- giveme_percentage(column, key)
cat(sprintf("\"%s\" \"%s\"\n", key, percentage_calculated))
}
}
}
############### Relação com o álcool #################################
# 1. Escola em que estudou e toma bebida alcoolica
table (alcohol_database$ESCOLA_Q_ESTUDOU,alcohol_database$VC_BEBI)# Mostra tudo sem separar
#################################
# Selecionando o banco de dados #
#################################
alcohol_database <- read_excel(
"Banco alcool_Trabalho final.xlsx",  sheet = "grupo 1"
)
##################
# Chamada pacote #
##################
library(readxl, descr, scales) # Load libraries
########################################
# Instalação dos pacotes no ambiente R #
########################################
install.packages("scales") # Install and load scales
